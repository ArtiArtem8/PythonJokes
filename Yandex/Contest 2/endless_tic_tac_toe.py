"""
A. Бесконечные крестики-нолики
Ограничение времени 	2 секунды
Ограничение памяти 	256Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt
Игра в крестики-нолики на бесконечной плоскости похожа на обычные крестики-нолики:
 два игрока по очереди ставят свои фигуры (крестики у первого игрока и нолики — у второго)
 в свободные клетки поля. Побеждает тот игрок, который первым выстроил пять своих фигур по
 горизонтали, вертикали или одной из диагоналей.
В логе записаны координаты клеток, в том порядке, в котором игроки ставили свои фигуры.
Определите, кто победил в игре или отследите ситуацию, что игроки увлеклись и
продолжили игру после победы одного из игроков.

Формат ввода
В первой строке записано число n (1 ≤ n ≤ 10000) — количество ходов, которые совершили игроки.
В следующих n строках записано по два числа r, c (|r|, |c| ≤ 109) — координаты клетки,
в которую была поставлена очередная фигура. Гарантируется, что все координаты клеток уникальны
(т.е. игрок не ставил свою фигуру в ту клетку, в которой уже стоит фигура)
Формат вывода
В случае победы первого игрока последним ходом выведите слово ”First”.
В случае победы второго игрока последним ходом выведите слово ”Second”.
Если ни один из игроков не успел победить выведите слово ”Draw”.
Если ходы продолжились после победы одного из игроков выведите слово ”Inattention”.
"""


def check(data):
    def check_win(player, r1, c1):
        for (dr, dc) in [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]:
            count = 1
            rx, cx = r1 + dr, c1 + dc
            while (rx, cx) in players_moves[player]:
                rx, cx = rx + dr, cx + dc
                count += 1
            rx, cx = r1 - dr, c1 - dc
            while (rx, cx) in players_moves[player]:
                rx, cx = rx - dr, cx - dc
                count += 1
            if count == 5:
                return True
        return False  # Todo: kys

    players_moves = {"First": set(), "Second": set()}
    for i, (r, c) in enumerate(data):
        player = ["First", "Second"][i % 2]
        players_moves[player].add((r, c))
        if check_win(player, r, c):
            if i == len(data) - 1:
                return player
            else:
                return "Inattention"
    return "Draw"


def test_1():
    n = 9
    rc = ((4, 4), (4, 5), (2, 2), (2, 3), (3, 3), (3, 4), (1, 1), (1, 2), (5, 5))
    moves = []
    for i in range(n):
        moves.append((rc[i][0], rc[i][1]))
    print(check(moves))
    assert check(moves) == "First"


def test_2():
    n = 9
    rc = ((4, 3), (4, 5), (2, 2), (2, 3), (3, 3), (3, 4), (1, 1), (1, 2), (5, 5))
    moves = []
    for i in range(n):
        moves.append((rc[i][0], rc[i][1]))
    print(check(moves))
    assert check(moves) == "Draw"


if __name__ == '__main__':
    test_1()
    test_2()
    n = int(input())
    moves = []
    for i in range(n):
        r, c = map(int, input().split())
        moves.append((r, c))
    print(check(moves))

# Тесты
