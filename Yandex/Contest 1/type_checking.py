# -*- coding: utf-8 -*-

"""B. Проверка печати
Ограничение времени 	1 секунда
Ограничение памяти 	64Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

Зимние каникулы... Чудесное время, полное ощущения волшебства,
 веселых игр на улице в снегу и прочих детских радостей.
 Но не для Васи. Вася — стартапер.
 И вот его осенила новая идея — сделать собственный клавиатурный тренажер!

Сел Вася и принялся писать код.

Дни и ночи напролет Вася усердно трудился.
И вот, прототип уже почти дописан, за исключением одной маленькой детали.

Тренажер представляет собой серию заданий: запрос к пользователю набрать некоторую строку a.

После этого пользователь должен как можно быстрее набрать на экране строку a,
 используя только латинские буквы и клавиши управления.

Вася решил записывать все нажатия клавиш пользователя в отдельный лог.
В нем присутствуют маленькие латинские буквы, а также управляющие конструкции

    <delete> Удаление символа после текущей позиции курсора.
    <bspace> Удаление символа перед текущей позицией курсора.
    <left> Курсор перемещается влево на один символ.
    <right> Курсор перемещается вправо на один символ.

Если управляющая конструкция перемещает курсор за границы текущей
строки или пытается удалить несуществующий символ, то ничего не происходит.

Теперь у Васи есть строчка, которую должен был набрать пользователь,
и последовательность нажатий клавиш, считанная из лога.
Помогите Васе выяснить, справился ли пользователь с заданием!

Формат ввода
hellochild
helto<left><bspace>l<delete>ochilds<bspace>
Даны две строки a и b, разделённые переводом строки,
— задание пользователя и последовательность нажатий клавиш (1 ≤ |a|, |b| ≤ 1000).
Формат вывода

Если пользователь справился с заданием, выведите "Yes" (без кавычек),
в противном случае выведите "No". """


def type_checking(a: str, b: str) -> bool:
    """
    Проверяет, справился ли пользователь с заданием
    :param a: задание пользователя
    :param b: последовательность нажатий клавиш
    :type a: str
    :type b: str
    :rtype: bool
    """
    cursor = 0
    s = 0
    resulting_string = []
    while s < len(b):  # s - индекс символа
        if b[s].isalpha():
            resulting_string.insert(cursor, b[s])
            cursor += 1
            s += 1
            continue

        match b[s:s + 2]:
            case "<d":  # delete
                if cursor < len(resulting_string):
                    resulting_string.pop(cursor)
                s += 8
            case "<b":  # backspace
                if cursor > 0:
                    resulting_string.pop(cursor - 1)
                    cursor -= 1
                s += 8
            case "<l":  # left
                if cursor > 0:
                    cursor -= 1
                s += 6
            case "<r":  # right
                if cursor < len(resulting_string):
                    cursor += 1
                s += 7
    return a == ''.join(resulting_string)


input_a = input().strip()
input_b = input().strip()  # Без strip код не заходит.
# Возможно это проблема в конце строки и данная функция не учитывает специальные символы
print("Yes" if type_checking(input_a, input_b) else "No")
